
pipeline {
  agent any
  options {
    ansiColor('xterm')
    timestamps()
  }

  stages {
    stage('npm audit') {
      steps {

        dir('web') {
          sh 'npm audit | tee auditReport.html'

          publishHTML (
              target : [
                  allowMissing: false,
                  alwaysLinkToLastBuild: true,
                  keepAll: true,
                  reportDir: '.',
                  reportFiles: 'auditReport.html',
                  reportName: 'npm audit report',
                  reportTitles: 'Reports'
              ]
          )
        }
      }
    }

    stage('sonarqube') {
      steps {
          sh 'env | sort'
      }
    }

    stage('build') {
      steps {
            
        dir('web'){

          script{

            if (env.BRANCH_NAME.startsWith("PR-")) {
                sh "docker build ."
            }else{
              env.SHORT_HASH = sh(returnStdout: true, script: "git rev-parse --short ${env.BRANCH_NAME}")
              sh "docker build -t ghcr.io/gasilva-clgx/web:${env.BRANCH_NAME}-${BUILD_NUMBER}-${env.SHORT_HASH} ."
            }
          }
        } 
      }
    }

    stage('push to cr') {
      when {
          expression {BRANCH_NAME ==~ /(master|develop)/}
        }

      steps {
        withCredentials([usernamePassword(credentialsId: 'gh-ga-token', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
          sh "docker login ghcr.io/gasilva-clgx -u ${USERNAME} -p ${PASSWORD} "
          sh 'docker push ghcr.io/gasilva-clgx/web:latest'
        }
      }
    }
    
    stage('deploy') {
        when {
          expression {BRANCH_NAME ==~ /(master|develop)/}
        }

        steps {
            
            withCredentials([usernamePassword(credentialsId: 'gh-ga-token', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
              echo 'deploy'
        }
      }
    }
  }
}

